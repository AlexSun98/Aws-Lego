{
	"AWSTemplateFormatVersion": "2010-09-09",

	"Description": "A template to launch elasticsearch cluster.",

	"Parameters": {
		"KeyPairName": {
			"Description": "Name of an existing EC2 KeyPair",
			"Default": "none-prod",
			"Type": "String"
		},
		"ServerInstanceType" : {
			"Description" : "Go master server EC2 instance type",
			"Type" : "String",
			"Default" : "t2.small",
			"AllowedValues": [
				"t2.small",
				"t2.medium",
				"m3.medium",
				"m3.large",
				"m3.xlarge",
				"m3.2xlarge"
			],
			"ConstraintDescription" : "must be a valid EC2 instance type."
		},
		"ServerAmi": {
			"Description": "AMI to use. Note Ubuntu is prefered.",
			"Default": "ami-fddabdc7",
			"Type": "String"
		},

		"AgentInstanceType" : {
			"Description" : "WebServer EC2 instance type",
			"Type" : "String",
			"Default" : "m3.medium",
			"AllowedValues": [
				"m3.medium",
				"m3.large",
				"m3.xlarge",
				"m3.2xlarge",
				"r3.large",
				"r3.xlarge",
				"r3.2xlarge",
				"r3.4xlarge",
				"r3.8xlarge"
			],
			"ConstraintDescription" : "must be a valid EC2 instance type."
		},
		"AgentSpotInstanceType" : {
			"Description" : "WebServer EC2 instance type",
			"Type" : "String",
			"Default" : "m3.large",
			"AllowedValues": [
				"m3.medium",
				"m3.large",
				"m3.xlarge",
				"m3.2xlarge",
				"r3.large",
				"r3.xlarge",
				"r3.2xlarge",
				"r3.4xlarge",
				"r3.8xlarge"
			],
			"ConstraintDescription" : "must be a valid EC2 instance type."
		},
		"WindowsAgentAmi": {
			"Description": "AMI to use. Note Ubuntu is prefered.",
			"Default": "ami-458eee7f",
			"Type": "String"
		},
		"LinuxAgentAmi": {
			"Description": "AMI to use. Note Ubuntu is prefered.",
			"Default": "ami-fddabdc7",
			"Type": "String"
		},
		"ArtifactDiskSize": {
			"Description": "Size of the disk to store built artifacts.",
			"Default": "500",
			"Type": "Number",
			"MinValue": "50",
			"MaxValue": "1000"
		},
		
		"GoServerBin": {
			"Description": "Url to download Go server binary from.",
			"Default": "http://download.go.cd/gocd-deb/go-server-14.2.0-377.deb",
			"Type": "String"
		},
		"GoWindowsAgentBin": {
			"Description": "Url to download Go windows agent binary from.",
			"Default": "http://download.go.cd/gocd/go-agent-14.2.0-377.zip",
			"Type": "String"
		},
		"GoAgentKey": {
			"Description": "Shared secret to allow auto registering of go agents.",
			"Default": "Password1234",
			"Type": "String"
		},

		"securityOutVpcId": {
		  "Description" : "VPCid associated with the subnets.",
		  "Type": "String"
		},
		"securityOutSubnet1Id": {
		  "Description" : "Subnet to run HA web cluster on.",
		  "Type": "String"
		},
		"securityOutSubnet2Id": {
		  "Description" : "Subnet to run HA web cluster on.",
		  "Type": "String"
		}
	},

	"Mappings" : {
		"InstanceVariables" : {
			"t2.small": { "ram" : "950" },
			"t2.medium": { "ram" : "1950" },
			"m3.medium": { "ram" : "1800", "lspotprice": "0.028", "wspotprice": "0.08" },
			"m3.large": { "ram" : "3600", "lspotprice": "0.056", "wspotprice": "0.15" },
			"m3.xlarge": { "ram" : "7000", "lspotprice": "0.111", "wspotprice": "0.271" },
			"m3.2xlarge": { "ram" : "14500", "lspotprice": "0.222", "wspotprice": "0.543" },
			"r3.large": { "ram" : "7500", "lspotprice": "0.065", "wspotprice": "0.155" },
			"r3.xlarge": { "ram" : "15000", "lspotprice": "0.130", "wspotprice": "0.280" },
			"r3.2xlarge": { "ram" : "30000", "lspotprice": "0.261", "wspotprice": "0.539" },
			"r3.4xlarge": { "ram" : "60000", "lspotprice": "0.522", "wspotprice": "0.948" },
			"r3.8xlarge": { "ram" : "12000", "lspotprice": "1.043", "wspotprice": "1.228" }
		}
	},

	"Resources" : {

		"GoServer" : {
			"Type" : "AWS::EC2::Instance",
			"Metadata" : {
				"AWS::CloudFormation::Init" : {
					"configSets": {
						"config": [
							"install-packages",
							"initialise-go"
						]
					},
					"install-packages" : {
						"packages": {
							"apt": {
								"unzip": [],
								"xmlstarlet": [],
								"subversion": [],
								"git": []
							}
						},
						"files" : {
							"/home/usr/local/go-server.deb" : {
								"source" : { "Ref": "GoServerBin" },
								"mode"   : "000755",
								"owner"  : "ubuntu",
								"group"  : "ubuntu"
							}
						},
						"commands" : {
							"1-install": {
								"command" : "dpkg -i go-server.deb &",
								"cwd" : "/home/usr/local/",
								"ignoreErrors" : "false"
							},
							"1-wait": {
								"command" : "sleep 5m",
								"cwd" : "/home/usr/local/",
								"ignoreErrors" : "false"
							}
						}
					},
					"initialise-go" : {
						"files" : {
							"/home/usr/local/mount-disk.sh" : {
								"content" : { "Fn::Join" : ["", [
									"#!/bin/bash\n",
									"mkfs -t ext4 /dev/$1\n",
									"mkdir /mnt/$1\n",
									"mount -t ext4 /dev/$1 /mnt/$1\n",
									"chmod 777 /mnt/$1"
								]]},
								"mode"   : "000755",
								"owner"  : "ubuntu",
								"group"  : "ubuntu"
							}
						},
						"commands" : {
							"1-mount-gp-ssd": {
								"command" : "bash mount-disk.sh xvdk",
								"cwd" : "/home/usr/local/",
								"ignoreErrors" : "false"
							},
							"2-mount-ephemeral-ssd": {
								"command" : "bash mount-disk.sh xvdb",
								"cwd" : "/home/usr/local/",
								"ignoreErrors" : "true"
							},
							"3-set-agent-key": {
								"command" : { "Fn::Join" : ["", [
									"xmlstarlet ed -L -i \"/cruise/server\" -t attr -n agentAutoRegisterKey -v \"", { "Ref" : "GoAgentKey" }, "\" cruise-config.xml"
								]]},
								"cwd" : "/etc/go/",
								"ignoreErrors" : "false"
							},
							"4-set-agent-key": {
								"command" : { "Fn::Join" : ["", [
									"xmlstarlet ed -L -u \"/cruise/server/@artifactsdir\" -v \"/mnt/xvdk\" cruise-config.xml"
								]]},
								"cwd" : "/etc/go/",
								"ignoreErrors" : "false"
							},
							"5-restart-go" : {
								"command" : "service go-server restart",
								"ignoreErrors" : "false"
							}
						}
					}
				}
			},
			"Properties" : {
				"InstanceType" : { "Ref" : "ServerInstanceType" },
				"ImageId" : { "Ref" : "ServerAmi" },
				"KeyName" : { "Ref" : "KeyPairName" },
				"SecurityGroupIds": [
					{ "Ref" : "ServerSg" }
				],
				"SubnetId": { "Ref" : "securityOutSubnet1Id"},
				"UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
					"#!/bin/bash\n",
					"apt-get update\n",
					"apt-get -y install python-setuptools default-jre\n",
					"easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
					"cfn-init --region ", { "Ref" : "AWS::Region" }," -s ", { "Ref" : "AWS::StackId" }, " -r GoServer -c config"
				]]}},
				"BlockDeviceMappings": [
					{
						"DeviceName" : "/dev/sda1",
						"Ebs": { "VolumeSize": "40", "VolumeType": "gp2" }
					},
					{
						"DeviceName" : "/dev/xvdk",
						"Ebs" : { "VolumeSize" : {"Ref": "ArtifactDiskSize"}, "VolumeType" : "standard" }
					}
				],
				"Tags": [
					{"Key": "Name", "Value" : "Go Server"}
				]
			}
		},

		"GoWindowsAgentLc" : {
			"Type" : "AWS::AutoScaling::LaunchConfiguration",
			"Metadata"  : {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "config": [
                            "init",
                            "rename",
                            "dcpromo",
                            "createsite",
                            "finalize"
                        ]
                    },
                    "init"    : {
                        "files": {
                            "C:\\cfn\\bin\\GoWindowsAgentBin.zip": {
                                "source": { "Ref": "GoWindowsAgentBin" }
                            },
							"C:\\cfn\\config\\autoregister.properties": {
                                "content": {"Fn::Join": ["",[
                                    "agent.auto.register.key=", { "Ref" : "GoAgentKey" },
                                    "agent.auto.register.resources=.Net",
									"agent.auto.register.environments=AWS"
                                ]]}
                            },
							"C:\\cfn\\scripts\\CreateAgent.ps1": {
                                "content": {"Fn::Join": ["",[
                                    "param(\n",
                                    "    [string]$BinZipPath,\n",
                                    "    [string]$Destination,\n",
                                    "    [string]$AutoRegisterProperties\n",
                                    ")\n",

                                    "function Expand-ZipFile($file, $destination)\n",
                                    "{\n",
                                    "    $shell = new-object -com shell.application\n",
                                    "    $zip = $shell.NameSpace($file)\n",
                                    "    foreach($item in $zip.items())\n",
                                    "    {\n",
                                    "        $shell.Namespace($destination).copyhere($item)\n",
                                    "    }\n",
                                    "}\n",

                                    "$a = 1\n",
                                    "do\n",
                                    "{\n",
                                    "    Expand-ZipFile –File $BinZipPath –Destination $Destination\n",
                                    "    Get-ChildItem $Destination -Filter \"go-agent*\" | % {\n",
                                    "        Write-Host $_.FullName\n",
                                    "        Rename-Item $_.FullName -NewName \"Agent$a\"\n",
                                    "        Copy-Item $AutoRegisterProperties \"$Destination\\Agent$a\\config\\autoregister.properties\"\n",
                                    "    }\n",
                                    "    New-Service -Name \"GoAgent$a\" -BinaryPathName \"$Destination\\Agen$a2\\cruisewrapper.exe -s `\"$Destination\\Agen$a2\\config\\wrapper-agent.conf`\"\"\n",
                                    "    Start-Service -Name \"GoAgent$a\"\n",
                                    "    $a++\n",
                                    "}\n",
                                    "while ($a -le 1)\n"
                                ]]}
                            }
                        },
                        "commands": {
							"1-set-go-server-ip": {
                                "command": { "Fn::Join": [ "", [
                                    "setx GO_SERVER ", { "Fn::GetAtt" : ["GoServer", "PrivateIp"] }, "\\m"
                                ]]},
                                "waitAfterCompletion": "0"
                            },
                            "2-dc-promo": {
                                "command": { "Fn::Join": [ "", [
                                    "powershell.exe -ExecutionPolicy Unrestricted",
                                    " C:\\cfn\\scripts\\CreateAgent.ps1",
									" -BinZipPath C:\\cfn\\bin\\GoWindowsAgentBin.zip",
                                    " -Destination Z:\\",
                                    " -AutoRegisterProperties C:\\cfn\\config\\autoregister.properties"
                                ]]},
                                "waitAfterCompletion": "60"
                            }
							
                        }
                    },
                    "finalize"   : {
                        "commands": {
							"3-signal-success": {
                                "command": { "Fn::Join": [ "", [
                                    "cfn-signal.exe -e %ERRORLEVEL% \"\""
                                ]]}
                            }
                        }
                    }
                }
            },
			"Properties": {
				"InstanceType" : { "Ref" : "AgentInstanceType" },
				"ImageId" : { "Ref" : "WindowsAgentAmi" },
				"KeyName" : { "Ref" : "KeyPairName" },
				"AssociatePublicIpAddress": "false",
				"SecurityGroups": [
					{ "Ref" : "AgentSg" }
				],
				"UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
					"#!/bin/bash\n",
					"apt-get update\n",
					"apt-get -y install python-setuptools default-jre\n",
					"easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
					"cfn-init --region ", { "Ref" : "AWS::Region" }," -s ", { "Ref" : "AWS::StackId" }, " -r GoWindowsAgentLc -c config"
				]]}}
			}
		},
		"GoWindowsAgentAsg" : {
			"Type" : "AWS::AutoScaling::AutoScalingGroup",
			"Properties" : {
			"VPCZoneIdentifier": [
				{ "Ref" : "securityOutSubnet1Id" }
			],
			"AvailabilityZones": [{ "Fn::Select": ["0",  { "Fn::GetAZs": "" }]}],
			"LaunchConfigurationName" : { "Ref" : "GoWindowsAgentLc" },
			"MinSize" : "0",
			"MaxSize" : "20",
			"DesiredCapacity" : "0",
				"Tags" : [{"Key": "Name", "Value" : "Go Agent", "PropagateAtLaunch" : "True"}]
			}
		},
		"GoWindowsAgentSpotLc" : {
			"Type" : "AWS::AutoScaling::LaunchConfiguration",
			"Properties": {
				"InstanceType" : { "Ref" : "AgentSpotInstanceType" },
				"ImageId" : { "Ref" : "WindowsAgentAmi" },
				"KeyName" : { "Ref" : "KeyPairName" },
				"AssociatePublicIpAddress": "false",
				"SecurityGroups": [
					{ "Ref" : "AgentSg" }
				],
				"UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
					"#!/bin/bash\n",
					"apt-get update\n",
					"apt-get -y install python-setuptools default-jre\n",
					"easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
					"cfn-init --region ", { "Ref" : "AWS::Region" }," -s ", { "Ref" : "AWS::StackId" }, " -r GoWindowsAgentLc -c config"
				]]}},
				"SpotPrice": { "Fn::FindInMap": [ "InstanceVariables", { "Ref": "AgentSpotInstanceType" }, "wspotprice" ] }
			}
		},
		"GoWindowsAgentSpotAsg" : {
			"Type" : "AWS::AutoScaling::AutoScalingGroup",
			"Properties" : {
				"VPCZoneIdentifier": [
					{ "Ref" : "securityOutSubnet1Id" },
					{ "Ref" : "securityOutSubnet2Id" }
				],
				"AvailabilityZones" : { "Fn::GetAZs": "" },
				"LaunchConfigurationName" : { "Ref" : "GoWindowsAgentSpotLc" },
				"MinSize" : "0",
				"MaxSize" : "20",
				"DesiredCapacity" : "0",
				"Tags" : [{"Key": "Name", "Value" : "Go Agent Spot", "PropagateAtLaunch" : "True"}]
			}
		},

		"ServerSg" : {
			"Type" : "AWS::EC2::SecurityGroup",
			"Properties" : {
				"GroupDescription" : "Go Server Security Group",
				"VpcId" : { "Ref" : "securityOutVpcId"},
				"SecurityGroupEgress" : [
					{ "IpProtocol": "-1", "CidrIp": "0.0.0.0/0" }
				],
				"Tags": [{"Key": "Name", "Value" : "Go Server Security Group"}]
			}
		},
		"AgentSg" : {
			"Type" : "AWS::EC2::SecurityGroup",
			"Properties" : {
				"GroupDescription" : "Go Agent Security Group. No in bound traffic other than Go Server.",
				"SecurityGroupIngress" : [
					{ "IpProtocol": "-1", "SourceSecurityGroupId" : {"Ref" : "ServerSg"}}
				],
				"SecurityGroupEgress" : [
					{ "IpProtocol": "-1", "CidrIp": "0.0.0.0/0" }
				],
				"VpcId" : { "Ref" : "securityOutVpcId"},
				"Tags": [{"Key": "Name", "Value" : "Go Agent Security Group"}]
			}
		}

	},

	"Outputs" : {
		"EsClusterMasters" : {
			"Value" : { "Fn::GetAtt" : ["GoServer", "PrivateIp"] },
			"Description" : "IP of the Go server."
		}
	}
}
